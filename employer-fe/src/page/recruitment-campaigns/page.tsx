"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import axios from "axios";
import { Calendar28 } from "@/components/calendar28";
import { toast } from "sonner";
import { format } from "date-fns"; // Import date-fns ƒë·ªÉ format ng√†y
import { vi } from "date-fns/locale"; // Import locale ti·∫øng Vi·ªát (n·∫øu c·∫ßn)
import {jwtDecode} from "jwt-decode"; // Import jwt-decode ƒë·ªÉ gi·∫£i m√£ token

interface Event {
  event_id: number;
  company_id: number;
  title: string;
  description: string;
  start_date: string;
  end_date: string;
  location: string;
  type: string;
  registration_url: string;
  status: string;
  created_at: string;
  updated_at: string;
}

interface TokenPayload {
  userId: string; // Gi·∫£ ƒë·ªãnh c·∫•u tr√∫c token ch·ª©a userId
}

export default function RecruitmentCampaignsPage() {
  const [events, setEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [formData, setFormData] = useState({
    title: "",
    description: "",
    start_date: "",
    end_date: "",
    location: "",
    type: "online", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 'online'
    registration_url: "",
    status: "upcoming", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 'upcoming'
  });
  const [companyId, setCompanyId] = useState<number | null>(null); // Th√™m state cho company_id

  // H√†m fetchEvents ƒë·ªÉ l·∫•y danh s√°ch s·ª± ki·ªán
  const fetchEvents = async () => {
    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("No token found");

      const response = await axios.get("http://localhost:3000/eventss", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setEvents(response.data);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·ª± ki·ªán");
      toast.error(error);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem("token");
        if (!token) throw new Error("No token found");

        // Gi·∫£i m√£ token ƒë·ªÉ l·∫•y userId
        const decodedToken = jwtDecode<TokenPayload>(token);
        const userId = decodedToken.userId;

        // L·∫•y company_id t·ª´ API
        const companyResponse = await axios.get(`http://localhost:3000/companiess/user/${userId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const company_Id = companyResponse.data.company_id; // Gi·∫£ ƒë·ªãnh API tr·∫£ v·ªÅ { company_id: number }
        setCompanyId(company_Id);

        // L·∫•y danh s√°ch s·ª± ki·ªán
        await fetchEvents();
      } catch (err) {
        setError(err instanceof Error ? err.message : "Unknown error");
        toast.error(error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const handleCreateOrUpdate = async () => {
    try {
      const token = localStorage.getItem("token");
      if (!token || !companyId) throw new Error("No token or company ID found");

      const payload = {
        ...formData,
        company_id: companyId, // S·ª≠ d·ª•ng company_id t·ª´ state
      };

      if (selectedEvent) {
        await axios.put(`http://localhost:3000/eventss/${selectedEvent.event_id}`, payload, {
          headers: { Authorization: `Bearer ${token}` },
        });
        toast.success(`C·∫≠p nh·∫≠t s·ª± ki·ªán c√≥ event_id = ${selectedEvent.event_id} th√†nh c√¥ng`);
      } else {
        await axios.post("http://localhost:3000/eventss", payload, {
          headers: { Authorization: `Bearer ${token}` },
        });
        toast.success("T·∫°o s·ª± ki·ªán th√†nh c√¥ng");
      }

      setDialogOpen(false);
      setSelectedEvent(null);
      setFormData({
        title: "",
        description: "",
        start_date: "",
        end_date: "",
        location: "",
        type: "online", // Reset v·ªÅ 'online' sau khi t·∫°o/s·ª≠a
        registration_url: "",
        status: "upcoming", // Reset v·ªÅ 'upcoming' sau khi t·∫°o/s·ª≠a
      });
      await fetchEvents(); // C·∫≠p nh·∫≠t danh s√°ch sau khi t·∫°o/s·ª≠a
    } catch (err) {
      setError(err instanceof Error ? err.message : "Kh√¥ng th·ªÉ l∆∞u s·ª± ki·ªán");
      toast.error(error);
    }
  };

  const handleDelete = async (eventId: number) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("No token found");

      await axios.delete(`http://localhost:3000/eventss/${eventId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success(`X√≥a s·ª± ki·ªán c√≥ event_id = ${eventId} th√†nh c√¥ng`);
      await fetchEvents(); // C·∫≠p nh·∫≠t danh s√°ch sau khi x√≥a
    } catch (err) {
      setError(err instanceof Error ? err.message : "Kh√¥ng th·ªÉ x√≥a s·ª± ki·ªán");
      toast.error(error);
    }
  };

  const handleEdit = (event: Event) => {
    setSelectedEvent(event);
    setFormData({
      title: event.title,
      description: event.description,
      start_date: event.start_date,
      end_date: event.end_date,
      location: event.location,
      type: event.type,
      registration_url: event.registration_url,
      status: event.status,
    });
    setDialogOpen(true);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 gap-8">
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>T·∫°o chi·∫øn d·ªãch tuy·ªÉn d·ª•ng c·ªßa b·∫°n</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  className="w-full bg-green-500 hover:bg-green-600 text-white"
                  onClick={() => {
                    setSelectedEvent(null);
                    setFormData({
                      title: "",
                      description: "",
                      start_date: "",
                      end_date: "",
                      location: "",
                      type: "online", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 'online'
                      registration_url: "",
                      status: "upcoming", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 'upcoming'
                    });
                    setDialogOpen(true);
                  }}
                >
                  T·∫°o m·ªõi chi·∫øn d·ªãch ‚Üí
                </Button>
              </div>
            </CardContent>
          </Card>

          <div className="space-y-4">
            <h3 className="font-semibold">Danh s√°ch chi·∫øn d·ªãch</h3>
            {loading ? (
              <p className="text-gray-500">ƒêang t·∫£i...</p>
            ) : error ? (
              <p className="text-red-500">{error}</p>
            ) : events.length > 0 ? (
              <div className="grid grid-cols-1 gap-4">
                {events.map((event) => (
                  <Card key={event.event_id}>
                    <CardContent className="p-4 flex justify-between items-center">
                      <div>
                        <h4 className="font-semibold">{event.title}</h4>
                        <p className="text-sm text-gray-600">
                          {format(new Date(event.start_date), "dd MMMM, yyyy", { locale: vi })} -{" "}
                          {format(new Date(event.end_date), "dd MMMM, yyyy", { locale: vi })}
                        </p>
                      </div>
                      <div className="space-x-2">
                        <Button variant="outline" onClick={() => handleEdit(event)}>
                          S·ª≠a
                        </Button>
                        <Button variant="destructive" onClick={() => handleDelete(event.event_id)}>
                          X√≥a
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <p className="text-gray-500">Kh√¥ng c√≥ chi·∫øn d·ªãch n√†o.</p>
            )}
          </div>

          <div className="space-y-4">
            <h3 className="font-semibold">üí° T√†i li·ªáu b·∫°n n√™n xem</h3>
            <p className="text-sm text-gray-600">
              Hi·ªÉu v·ªÅ c√°ch chi·∫øn d·ªãch tuy·ªÉn d·ª•ng ho·∫°t ƒë·ªông s·∫Ω gi√∫p b·∫°n t·ªëi ∆∞u t·ªët h∆°n ho·∫°t ƒë·ªông tuy·ªÉn d·ª•ng c·ªßa doanh
              nghi·ªáp tr√™n TopCV. H√£y ch·∫Øc ch·∫Øn b·∫°n ƒë√£ t√¨m hi·ªÉu th√¥ng tin v·ªÅ chi·∫øn d·ªãch tuy·ªÉn d·ª•ng.
            </p>
            <div className="space-y-2">
              <Button variant="link" className="text-green-500 p-0 h-auto">
                Smart Recruitment Platform Principle ‚Üí
              </Button>
              <Button variant="link" className="text-green-500 p-0 h-auto">
                Kh√°i ni·ªám Chi·∫øn d·ªãch tuy·ªÉn d·ª•ng ‚Üí
              </Button>
              <Button variant="link" className="text-green-500 p-0 h-auto">
                Kh·ªüi t·∫°o Chi·∫øn d·ªãch tuy·ªÉn d·ª•ng ƒë√∫ng c√°ch ‚Üí
              </Button>
            </div>
          </div>
        </div>
      </div>

      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{selectedEvent ? "S·ª≠a chi·∫øn d·ªãch" : "T·∫°o chi·∫øn d·ªãch m·ªõi"}</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="title">T√™n chi·∫øn d·ªãch *</Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                placeholder="VD: Tuy·ªÉn d·ª•ng nh√¢n vi√™n Marketing th√°ng 10..."
              />
            </div>
            <div>
              <Label htmlFor="description">M√¥ t·∫£</Label>
              <Input
                id="description"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="M√¥ t·∫£ chi ti·∫øt..."
              />
            </div>
            <div>
              <Calendar28
                value={formData.start_date}
                onChange={(date, formattedValue) => setFormData({ ...formData, start_date: formattedValue })}
                label="Ng√†y b·∫Øt ƒë·∫ßu"
              />
            </div>
            <div>
              <Calendar28
                value={formData.end_date}
                onChange={(date, formattedValue) => setFormData({ ...formData, end_date: formattedValue })}
                label="Ng√†y k·∫øt th√∫c"
              />
            </div>
            <div>
              <Label htmlFor="location">ƒê·ªãa ƒëi·ªÉm</Label>
              <Input
                id="location"
                value={formData.location}
                onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                placeholder="ƒê·ªãa ƒëi·ªÉm t·ªï ch·ª©c..."
              />
            </div>
            <div>
              <Label htmlFor="type">Lo·∫°i</Label>
              <Select
                value={formData.type}
                onValueChange={(value) => setFormData({ ...formData, type: value })}
              >
                <SelectTrigger id="type" className="mt-1">
                  <SelectValue placeholder="Ch·ªçn lo·∫°i" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="online">Online</SelectItem>
                  <SelectItem value="offline">Offline</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="registration_url">Link ƒëƒÉng k√Ω</Label>
              <Input
                id="registration_url"
                value={formData.registration_url}
                onChange={(e) => setFormData({ ...formData, registration_url: e.target.value })}
                placeholder="Link ƒëƒÉng k√Ω..."
              />
            </div>
            <div>
              <Label htmlFor="status">Tr·∫°ng th√°i</Label>
              <Select
                value={formData.status}
                onValueChange={(value) => setFormData({ ...formData, status: value })}
              >
                <SelectTrigger id="status" className="mt-1">
                  <SelectValue placeholder="Ch·ªçn tr·∫°ng th√°i" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="upcoming">S·∫Øp di·ªÖn ra</SelectItem>
                  <SelectItem value="ongoing">ƒêang di·ªÖn ra</SelectItem>
                  <SelectItem value="finished">K·∫øt th√∫c</SelectItem>
                  <SelectItem value="cancelled">ƒê√£ h·ªßy</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setDialogOpen(false)}>
              H·ªßy
            </Button>
            <Button onClick={handleCreateOrUpdate}>
              {selectedEvent ? "L∆∞u thay ƒë·ªïi" : "T·∫°o m·ªõi"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}